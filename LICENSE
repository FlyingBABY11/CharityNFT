// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract FeedTheCharityNFT is ERC721Enumerable, Ownable {
    uint256 public constant PRICE = 0.2 ether; // Price per NFT in ETH
    uint256 public constant MAX_SUPPLY = 500; // Total NFTs available
    address public immutable charityWallet; // Address to receive charity royalties
    string private baseURI; // Base URI for metadata

    constructor(address _charityWallet, string memory _baseURI) ERC721("FeedTheCharity", "FTC") {
        require(_charityWallet != address(0), "Invalid charity wallet");
        charityWallet = _charityWallet;
        baseURI = _baseURI;
    }

    /**
     * @notice Mint an NFT by paying the fixed price.
     */
    function mint() external payable {
        require(totalSupply() < MAX_SUPPLY, "All NFTs are sold");
        require(msg.value == PRICE, "Incorrect ETH amount");

        uint256 tokenId = totalSupply() + 1;
        _safeMint(msg.sender, tokenId);

        // Forward payment to the owner's wallet
        payable(owner()).transfer(msg.value);
    }

    /**
     * @notice Override for base URI used in metadata.
     */
    function _baseURI() internal view override returns (string memory) {
        return baseURI;
    }

    /**
     * @notice Update base URI (Owner only).
     */
    function setBaseURI(string memory _newBaseURI) external onlyOwner {
        baseURI = _newBaseURI;
    }

    /**
     * @notice Resale royalty distribution (10% to charity).
     */
    function royaltyInfo(uint256 /*tokenId*/, uint256 salePrice) external view returns (address receiver, uint256 royaltyAmount) {
        uint256 royalty = (salePrice * 10) / 100; // 10% royalty
        return (charityWallet, royalty);
    }
}
